enum PinAssignments {
  encoderPinA = 2,   // right (labeled DT on our decoder, yellow wire)
  encoderPinB = 3,   // left (labeled CLK on our decoder, green wire)
};
volatile unsigned int encoderPos = 0;  // a counter for the dial
unsigned int lastReportedPos = 1;   // change management
boolean A_set = false;              
boolean B_set = false;
int dirPin = 6;
int stepPin = 5;
int emelkedes = 4;
int k;

void setup() {
  // put your setup code here, to run once:
  pinMode(encoderPinA, INPUT_PULLUP); // new method of enabling pullups
  pinMode(encoderPinB, INPUT_PULLUP); 
  attachInterrupt(0, doEncoderA, CHANGE);
  attachInterrupt(1, doEncoderB, CHANGE);
  pinMode(dirPin,OUTPUT);
  pinMode(stepPin,OUTPUT);
}

void loop() {
  // put your main code here, to run repeatedly:
  if (lastReportedPos != encoderPos) {
    if (encoderPos > lastReportedPos) {
      for (k = 0; k < emelkedes; k++) {
      rotateCW();
      }
    }
    else for (k = 0; k < emelkedes; k++) {
      rotateCCW();
      }
   
    lastReportedPos = encoderPos;
  }
}

void doEncoderA(){
  // debounce
  if( digitalRead(encoderPinA) != A_set ) {  // debounce once more
    A_set = !A_set;
    // adjust counter + if A leads B
    if ( A_set && !B_set ) 
      encoderPos += 1;
  }
}
// Interrupt on B changing state, same as A above
void doEncoderB(){
  if( digitalRead(encoderPinB) != B_set ) {
    B_set = !B_set;
    //  adjust counter â€“ 1 if B leads A
    if( B_set && !A_set ) 
      encoderPos -= 1;
  }
}

void rotateCW() {
  digitalWrite(dirPin,LOW);
    digitalWrite(stepPin,HIGH);
    delayMicroseconds(1);
    digitalWrite(stepPin,LOW);
}

void rotateCCW() {
  digitalWrite(dirPin,HIGH);
    digitalWrite(stepPin,HIGH);
    delayMicroseconds(1);
    digitalWrite(stepPin,LOW);
}
